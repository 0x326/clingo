cmake_minimum_required(VERSION 3.1)

file(READ "libgringo/clingo.h" clingoh)
string(REGEX MATCH "#define CLINGO_VERSION \"([^\"]*)\"" clingov ${clingoh})

project(CLINGO VERSION "${CMAKE_MATCH_1}" LANGUAGES C CXX)
if (POLICY CMP0063)
    cmake_policy(SET CMP0063 NEW)
endif()

include(CMakeDependentOption)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Enable folders in IDEs like Visual Studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(CLINGO_BUILD_WEB         "enable web target"           OFF)
option(CLINGO_BUILD_SHARED      "build clingo library shared"  ON)
option(CLINGO_BUILD_WITH_PYTHON "enable python support"        ON)
option(CLINGO_BUILD_WITH_LUA    "enable lua support"           ON)
option(CLINGO_BUILD_TESTS       "build tests"                 OFF)
option(CLINGO_BUILD_EXAMPLES    "build examples"              OFF)
option(CLINGO_BUILD_APPS        "build applications"           ON)
option(CLINGO_MANAGE_RPATH      "set rpath if not installed into system directory" ON)

CMAKE_DEPENDENT_OPTION(CLINGO_REQUIRE_PYTHON "fail if python support not found" OFF "CLINGO_BUILD_WITH_PYTHON" OFF)
CMAKE_DEPENDENT_OPTION(CLINGO_REQUIRE_LUA    "fail if lua support not found"    OFF "CLINGO_BUILD_WITH_LUA"    OFF)

if (CLINGO_MANAGE_RPATH)
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if ("${isSystemDir}" STREQUAL "-1")
        set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif()
endif()

if (CLINGO_BUILD_WEB)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS)
    unset(CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES)
    unset(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES)
endif()

if (NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()
if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()
if (NOT CMAKE_IMPORT_LIBRARY_PREFIX)
    set(CMAKE_IMPORT_LIBRARY_PREFIX import_)
endif()

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected - using 'Release'")
    set(CMAKE_BUILD_TYPE "Release")
endif()

set(clingo_external_libs)
set(clingo_pygringo_libs)
if (CLINGO_BUILD_WITH_PYTHON)
    if (CLINGO_REQUIRE_PYTHON)
        find_package(PythonLibs REQUIRED)
    else()
        find_package(PythonLibs)
    endif()
    if(PYTHONLIBS_FOUND)
        add_library(Python::Python INTERFACE IMPORTED)
        set_property(TARGET Python::Python PROPERTY INTERFACE_COMPILE_DEFINITIONS "WITH_PYTHON")
        set_property(TARGET Python::Python PROPERTY INTERFACE_LINK_LIBRARIES "${PYTHON_LIBRARIES}")
        set_property(TARGET Python::Python PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}")
        list(APPEND clingo_pygringo_libs Python::Python)
    endif()
endif()
if (CLINGO_BUILD_WITH_LUA)
    if (CLINGO_REQUIRE_LUA)
        find_package(Lua)
    else()
        find_package(Lua REQUIRED)
    endif()
    if(LUA_FOUND)
        add_library(Lua::Lua INTERFACE IMPORTED)
        set_property(TARGET Lua::Lua PROPERTY INTERFACE_COMPILE_DEFINITIONS "WITH_LUA")
        set_property(TARGET Lua::Lua PROPERTY INTERFACE_LINK_LIBRARIES "${LUA_LIBRARIES}")
        set_property(TARGET Lua::Lua PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${LUA_INCLUDE_DIR}")
        list(APPEND clingo_external_libs Lua::Lua)
    endif()
endif()
find_package(BISON "2.5" REQUIRED)
find_package(RE2C REQUIRED)

if (POLICY CMP0063 AND (CLINGO_BUILD_SHARED OR PYTHONLIBS_FOUND OR LUA_FOUND))
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
    set(CMAKE_C_VISIBILITY_PRESET hidden)
endif()

enable_testing()

# NOTE: assumes that submodule has been initialized
set(CLASP_BUILD_APP ${CLINGO_BUILD_APPS} CACHE BOOL "")
add_subdirectory(clasp)
add_subdirectory(libreify)
add_subdirectory(libgringo)
add_subdirectory(libpygringo)
add_subdirectory(libclingo)
if (CLINGO_BUILD_APPS)
    add_subdirectory(app/reify)
    add_subdirectory(app/gringo)
    add_subdirectory(app/clingo)
endif()
if (CLINGO_BUILD_EXAMPLES)
    add_subdirectory(examples/c)
    add_subdirectory(examples/cc)
endif()
if (PYTHONLIBS_FOUND)
    add_subdirectory(app/pyclingo)
endif()
if (LUA_FOUND)
    add_subdirectory(app/luaclingo)
endif()
if (CLINGO_BUILD_WEB)
    add_subdirectory(app/web)
endif()
if (CLINGO_BUILD_SHARED OR PYTHONLIBS_FOUND OR LUA_FOUND)
    foreach(target libclingo libgringo libpotassco libclasp libreify libpygringo)
        set_target_properties(${target} PROPERTIES POSITION_INDEPENDENT_CODE ON)
    endforeach()
endif()

